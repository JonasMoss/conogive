hist(predict(object, newdata, "optimal"))
newdata = agreeableness
object = latcon(newdata)
hist(predict(object, newdata, "optimal"))
hist(predict(object, newdata, "equal"))
newdata = newdata[1, ]
predict(object, newdata, "equal")
ordinal_omega(object, weights = "optimal", xi = "theoretical")
devtools::load_all(".")
newdata = newdata[1, ]
predict(object, newdata, "equal")
ordinal_omega(object, weights = "optimal", xi = "theoretical")
devtools::load_all(".")
newdata = newdata[1, ]
predict(object, newdata, "equal")
ordinal_omega(object, weights = "optimal", xi = "theoretical")
agreeableness = psychTools::bfi[c("A1", "A2", "A3", "A4", "A5")]
agreeableness[, "A1"] = 7 - agreeableness[, "A1"] # Reverse-coded item.
conscientiousness = psychTools::bfi[c("C1", "C2", "C3", "C4", "C5")]
conscientiousness[, "C4"] = 7 - conscientiousness[, "C4"] # Reverse-coded item.
extraversion = psychTools::bfi[c("E1", "E2", "E3", "E4", "E5")]
extraversion[, "E1"] = 7 - extraversion[, "E1"] # Reverse-coded item.
newdata = agreeableness
object = latcon(newdata)
hist(predict(object, newdata, "optimal"))
hist(predict(object, newdata, "equal"))
newdata = newdata[1, ]
predict(object, newdata, "equal")
ordinal_omega(object, weights = "optimal", xi = "theoretical")
ordinal_omega(object, weights = "equal", xi = "theoretical")
ordinal_omega(object, weights = "optimal", xi = "sample")
ordinal_omega(object, weights = "equal", xi = "sample")
object
devtools::load_all(".")
agreeableness = psychTools::bfi[c("A1", "A2", "A3", "A4", "A5")]
agreeableness[, "A1"] = 7 - agreeableness[, "A1"] # Reverse-coded item.
conscientiousness = psychTools::bfi[c("C1", "C2", "C3", "C4", "C5")]
conscientiousness[, "C4"] = 7 - conscientiousness[, "C4"] # Reverse-coded item.
extraversion = psychTools::bfi[c("E1", "E2", "E3", "E4", "E5")]
extraversion[, "E1"] = 7 - extraversion[, "E1"] # Reverse-coded item.
newdata = agreeableness
object = latcon(newdata)
hist(predict(object, newdata, "optimal"))
hist(predict(object, newdata, "equal"))
newdata = newdata[1, ]
predict(object, newdata, "equal")
ordinal_omega(object, weights = "optimal", xi = "theoretical")
ordinal_omega(object, weights = "equal", xi = "theoretical")
ordinal_omega(object, weights = "optimal", xi = "sample")
ordinal_omega(object, weights = "equal", xi = "sample")
devtools::load_all(".")
agreeableness = psychTools::bfi[c("A1", "A2", "A3", "A4", "A5")]
agreeableness[, "A1"] = 7 - agreeableness[, "A1"] # Reverse-coded item.
conscientiousness = psychTools::bfi[c("C1", "C2", "C3", "C4", "C5")]
conscientiousness[, "C4"] = 7 - conscientiousness[, "C4"] # Reverse-coded item.
extraversion = psychTools::bfi[c("E1", "E2", "E3", "E4", "E5")]
extraversion[, "E1"] = 7 - extraversion[, "E1"] # Reverse-coded item.
newdata = agreeableness
object = latcon(newdata)
hist(predict(object, newdata, "optimal"))
hist(predict(object, newdata, "equal"))
newdata = newdata[1, ]
predict(object, newdata, "equal")
ordinal_omega(object, weights = "optimal", xi = "theoretical")
ordinal_omega(object, weights = "equal", xi = "theoretical")
ordinal_omega(object, weights = "optimal", xi = "sample")
ordinal_omega(object, weights = "equal", xi = "sample")
object
devtools::load_all(".")
ordinal_omega(object, weights = "equal", xi = "sample", limit = TRUE)
ordinal_omega(object, weights = "optimal", xi = "theoretical")
ordinal_omega(object, weights = "equal", xi = "theoretical")
ordinal_omega(object, weights = "optimal", xi = "sample")
ordinal_omega(object, weights = "equal", xi = "sample")
ordinal_omega(object, weights = "equal", xi = "sample", limit = TRUE)
ordinal_omega(object, weights = "optimal", xi = "sample", limit = TRUE)
?lm
?cov
?mean
?rowMeans
?predict.lm
plot(colSums(newdata, na.rm = TRUE), predict(object, newdata, "optimal"))
plot(rowSums(newdata, na.rm = TRUE), predict(object, newdata, "optimal"))
rowSums(newdata, na.rm = TRUE)
newdata
newdata = agreeableness
object = latcon(newdata)
plot(rowSums(newdata, na.rm = TRUE), predict(object, newdata, "optimal"))
cor(rowSums(newdata, na.rm = TRUE), predict(object, newdata, "optimal"))
?cor
cor(rowSums(newdata, na.rm = TRUE), predict(object, newdata, "optimal"), use = "complete.obs")
newdata = conscientiousness
object = latcon(newdata)
plot(rowSums(newdata, na.rm = TRUE), predict(object, newdata, "optimal"))
cor(rowSums(newdata, na.rm = TRUE), predict(object, newdata, "optimal"), use = "complete.obs")
conscientiousness
apply(conscientiousness, 2, max, na.rm = TRUE)
newdata = conscientiousness
object = latcon(newdata)
extraversion = psychTools::bfi[c("E1", "E2", "E3", "E4", "E5")]
extraversion[, "E1"] = 7 - extraversion[, "E1"] # Reverse-coded item.
fit = latcon(extraversion)
fi
fit
?psych::alpha
?psych::alpha.ci
?psych::omega
psych::jensen
?psych::Bechtoldt
psych::Bechtoldt
psychTools::blot
latcon(psychTools::blot)
psychTools::holzinger.raw
psychTools::holzinger.swineford
?psychTools::holzinger.swineford
lavaan::HolzingerSwineford1939
psychTools::holzinger.swineford
psychTools::holzinger.raw
psychTools::ability
latcon(psychTools::ability)
fit = latcon(psychTools::ability)
hist(predict(fit))
hist(predict(fit, psychTools::ability))
psychTools::ability
newdata = psychTools::ability
object = latcon(newdata)
predict(object, newdata)
ordinal_omega(object, weights = "optimal", xi = "theoretical")
newdata = psychTools::ability
object = latcon(newdata)
predict(object, newdata)
ordinal_omega(object, weights = "optimal", limit = TRUE)
object
data
newdata
weights = c("optimal", "equal")
weights = match.arg(weights)
lambda = object$lambda
sigma = object$sigma
weights = "optimal"
k = ncol(newdata)
cuts = massage_cuts(object$cuts)
mat = sapply(seq.int(k), function(i) x_hat(newdata[, i], cuts[[i]]))
mat
ccut()
cuts
newdata
mat
i = 1
newdata[, i]
cuts[[i]]
y = newdata[, i]
cuts = cuts[[i]]
checkmate::assert_atomic_vector(y)
checkmate::assert_numeric(y)
f = function(i) {
-(stats::dnorm(cuts[i + 1]) - stats::dnorm(cuts[i]))/
(stats::pnorm(cuts[i + 1]) - stats::pnorm(cuts[i]))
}
sapply(X = y, FUN = f)
f = function(i) {
-(stats::dnorm(cuts[i + 1]) - stats::dnorm(cuts[i]))/
(stats::pnorm(cuts[i + 1]) - stats::pnorm(cuts[i]))
}
f(y[1])
cuts
i
y
f(1)
f(0)
devtools::load_all(".")
ordered_y(psychTools::ability)
devtools::load_all(".")
newdata = psychTools::ability
object = latcon(newdata)
predict(object, newdata)
ordinal_omega(object, weights = "optimal", limit = TRUE)
newdata = psychTools::ability
object = latcon(newdata)
predict(object, newdata)
ordinal_omega(object, weights = "optimal")
devtools::load_all(".")
newdata = psychTools::ability
object = latcon(newdata)
predict(object, newdata)
ordinal_omega(object, weights = "optimal")
newdata = psychTools::ability
object = latcon(newdata)
y = predict(object, newdata)
ordinal_omega(object, weights = "optimal")
hist(y)
?psychTools::ability
alpha(psychTools::ability)
psych::alpha(psychTools::ability)
ability.irt <- psych::irt.fa(ability)
ability.scores <- psych::scoreIrt(ability.irt,ability)
ability.irt <- psych::irt.fa(psychTools::ability)
ability.scores <- psych::scoreIrt(psychTools::ability.irt,ability)
ability.irt <- psych::irt.fa(psychTools::ability)
ability.scores <- psych::scoreIrt(ability.irt, psychTools::ability)
ability.scores
?psych::scoreIrt
ability.scores <- psych::scoreIrt(ability.irt, psychTools::ability)[, 1]
plot(y, ability.scores)
plot(y, ability.scores)
abline(a = 0, b = 1)
plot(y, ability.scores)
lines(lm(ability.scores ~ y))
lm(ability.scores ~ y)
mod
mod = lm(ability.scores ~ y)
plot(y, ability.scores)
lines(sort(y), coef(mod))
summary(mod)
?psych::irt.fa
psych::irt
?psych::irt.2p()
install.packages("itm")
install.packages("ltm")
?ltm::ltm
ltm::WIRS
newdata = ltm::WIRS
object = latcon(newdata)
y = predict(object, newdata)
ordinal_omega(object, weights = "optimal")
z = psych::scoreIrt(psych::irt.fa(newdata), psychTools::ability)[, 1]
mod = lm(ability.scores ~ y)
plot(y, ability.scores)
lines(sort(y), coef(mod, 1) + coef(mod, 2)*sort(y))
newdata = ltm::WIRS
object = latcon(newdata)
y = predict(object, newdata)
ordinal_omega(object, weights = "optimal")
z = psych::scoreIrt(psych::irt.fa(newdata), psychTools::ability)[, 1]
mod = lm(z ~ y)
plot(y, z)
lines(sort(y), coef(mod, 1) + coef(mod, 2)*sort(y))
z
y
length(y)
newdata = ltm::WIRS
object = latcon(newdata)
y = predict(object, newdata)
ordinal_omega(object, weights = "optimal")
z = psych::scoreIrt(psych::irt.fa(newdata), newdata)[, 1]
mod = lm(z ~ y)
plot(y, z)
lines(sort(y), coef(mod, 1) + coef(mod, 2)*sort(y))
mod = lm(z ~ y)
plot(y, z)
lines(sort(y), coef(mod)[1] + coef(mod)[2]*sort(y))
WIRS
ltm::WIRS
z = lmt::ltm(mt::WIRS ~ z1)
z = ltm::ltm(ltm::WIRS ~ z1)
library("ltm")
z = ltm::ltm(ltm::WIRS ~ z1)
z
factor.scores(ltm::ltm(ltm::WIRS ~ z1))
z = psych::scoreIrt(psych::irt.fa(newdata), newdata)[, 1]
library("ltm")
z = factor.scores(ltm::ltm(ltm::WIRS ~ z1))$z1
mod = lm(z ~ y)
plot(y, z)
lines(sort(y), coef(mod)[1] + coef(mod)[2]*sort(y))
z
factor.scores(ltm::ltm(ltm::WIRS ~ z1))
str(factor.scores(ltm::ltm(ltm::WIRS ~ z1)))
z = factor.scores(ltm::ltm(ltm::WIRS ~ z1))$score.dat$z1
mod = lm(z ~ y)
plot(y, z)
lines(sort(y), coef(mod)[1] + coef(mod)[2]*sort(y))
z
newdata = ltm::WIRS
object = latcon(newdata)
y = predict(object, newdata)
ordinal_omega(object, weights = "optimal")
z = psych::scoreIrt(psych::irt.fa(newdata), newdata)[, 1]
library("ltm")
z = factor.scores(ltm::ltm(ltm::WIRS ~ z1))$score.dat$z1
mod = lm(z ~ y)
plot(y, z)
lines(sort(y), coef(mod)[1] + coef(mod)[2]*sort(y))
y
newdata
ltm::WIRS
factor.scores(ltm::ltm(ltm::WIRS ~ z1))
?factor.scores
factor.scores(ltm::ltm(ltm::WIRS ~ z1), ltm::WIRS)
z = psych::scoreIrt(psych::irt.fa(newdata), newdata)[, 1]
library("ltm")
z = factor.scores(ltm::ltm(ltm::WIRS ~ z1))$score.dat$z1
mod = lm(z ~ y)
plot(y, z)
lines(sort(y), coef(mod)[1] + coef(mod)[2]*sort(y))
z = psych::scoreIrt(psych::irt.fa(newdata), newdata)[, 1]
library("ltm")
z = factor.scores(ltm::ltm(ltm::WIRS ~ z1), ltm::WIRS)$score.dat$z1
mod = lm(z ~ y)
plot(y, z)
lines(sort(y), coef(mod)[1] + coef(mod)[2]*sort(y))
psych::irt.fa()
psych::irt.fa(newdata)
str(psych::irt.fa(newdata))
object
?psych::irt.fa
newdata = ltm::WIRS
object = latcon(newdata, fm = "ml")
object
object$lambda
object$lambda %*% t(object$lambda) + diag(sigma^2)
object$lambda %*% t(object$lambda) + diag(object$sigma^2)
psych::fa
?psych::fa
?do.call
devtools::load_all(".")
newdata = ltm::WIRS
object = latcon(newdata, fm = "ml")
devtools::load_all(".")
newdata = ltm::WIRS
object = latcon(newdata, fm = "ml")
devtools::load_all(".")
newdata = ltm::WIRS
object = latcon(newdata, fm = "ml")
devtools::load_all(".")
newdata = ltm::WIRS
object = latcon(newdata, fm = "ml")
devtools::load_all(".")
newdata = ltm::WIRS
object = latcon(newdata, fm = "ml")
object
newdata = ltm::WIRS
object = latcon(newdata, fm = "minres")
object
newdata = ltm::WIRS
object = latcon(newdata, fm = "ml")
y = predict(object, newdata)
ordinal_omega(object, weights = "optimal")
mod = lm(z ~ y)
plot(y, z)
lines(sort(y), coef(mod)[1] + coef(mod)[2]*sort(y))
summary(mod)
?psych::scoreIrt
install.packages("MIRT")
install.packages("mirtT")
install.packages("mirt")
?mirt::mirt()
mod = lm(z ~ y)
plot(y, z)
lines(sort(y), coef(mod)[1] + coef(mod)[2]*sort(y))
ltm::Abortion
newdata = ltm::abortion
object = latcon(newdata, fm = "ml")
y = predict(object, newdata)
ordinal_omega(object, weights = "optimal")
z = psych::scoreIrt(psych::irt.fa(newdata), newdata)[, 1]
#library("ltm")
#z = factor.scores(ltm::ltm(ltm::WIRS ~ z1), ltm::WIRS)$score.dat$z1
mod = lm(z ~ y)
plot(y, z)
lines(sort(y), coef(mod)[1] + coef(mod)[2]*sort(y))
newdata = ltm::abortion
object = latcon(newdata, fm = "ml")
y = predict(object, newdata)
ordinal_omega(object, weights = "optimal")
ordinal_omega(object, weights = "optimal", limit = TRUE)
psych::irt.fa(newdata)
?psych::irt.fa
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
agreeableness = psychTools::bfi[c("A1", "A2", "A3", "A4", "A5")]
agreeableness[, "A1"] = 7 - agreeableness[, "A1"] # Reverse-coded item.
object = latcon(agreeableness)
ordinal_alpha(object) # 0.6267724
ordinal_omega(object, weights = "equal") # 0.6394087
devtools::load_all(".")
xi_sample
y
y = mtcars[, c("vs", "am", "gear", "carb")]
msg = "Smaller number of categories than length of cuts."
expect_error(xi_sample(y, cuts[[1]]), regexp = msg)
expect_equal(dim(xi_sample(ordered_y(y), cuts)), c(k, k))
y = mtcars[, c("vs", "am", "gear", "carb")]
cuts = list(qnorm(seq(0, 1, length.out = 3)),
qnorm(seq(0, 1, length.out = 3)),
qnorm(seq(0, 1, length.out = 4)),
qnorm(seq(0, 1, length.out = 9)))
rho = cor(y)
k = ncol(y)
test_that("trim_vector accepts only numeric vectors with no NAs", {
expect_error(trim_vector("a"))
expect_error(trim_vector(lm))
expect_error(trim_vector(matrix(1, 2, 2)))
expect_error(trim_vector(c(1,NA)))
})
test_that("trim_vector removes all infinities and appends/prepends", {
vec = c(1, Inf, -Inf, 2)
expect_equal(trim_vector(vec)[1], -Inf)
expect_equal(tail(trim_vector(vec),1), Inf)
expect_equal(trim_vector(vec)[2], 1)
expect_equal(trim_vector(vec)[3], 2)
})
test_that("massage_cuts accepts appropriate input and returns the right values", {
expect_error(massage_cuts(NULL, "a"))
expect_error(massage_cuts(NULL, 5), "list")
expect_type(massage_cuts(cuts, 5), "list")
expect_equal(length(massage_cuts(cuts[[1]])), 1)
})
test_that("xi_theoretical works", {
rho_ = rho
rho_[1, 1] = NA
expect_equal(dim(xi_theoretical(cuts, rho = rho)), c(k, k))
expect_error(xi_theoretical(cuts, rho = "a"))
expect_error(xi_theoretical(cuts, rho = rho_))
})
test_that("xi_sample works", {
msg = "Smaller number of categories than length of cuts."
expect_error(xi_sample(y, cuts[[1]]), regexp = msg)
expect_equal(dim(xi_sample(ordered_y(y), cuts)), c(k, k))
})
test_that("x_hat throws errors and returns the correct type", {
expect_error(x_hat(c("NA" ,1, 2), cuts[[1]]))
expect_type(x_hat(c(2 ,1, 2), cuts[[1]]), "double")
})
test_that("standardize-functions works", {
lambda = 1:3
sigma = 1:3
expect_error(standardize_lambda(c(NA ,1, 2)))
expect_error(standardize_sigma(c(NA ,1, 2)))
expect_equal(standardize_lambda(lambda, sigma),
standardize_sigma(lambda, sigma))
})
devtools::load_all(".")
latcon(list(lambda = rep(1, 3), sigma = rep(1, 3), cuts = c(-Inf, 0, Inf)))
devtools::load_all(".")
latcon(list(lambda = rep(1, 3), sigma = rep(1, 3), cuts = c(-Inf, 0, Inf)))
devtools::load_all(".")
latcon(list(lambda = rep(1, 3), sigma = rep(1, 3), cuts = c(-Inf, 0, Inf)))
data = list(lambda = rep(1, 3), sigma = rep(1, 3), cuts = c(-Inf, 0, Inf))
data
checkmate::assertNumeric(data$lambda)
k = length(data$lambda)
checkmate::assertNumeric(data$sigma, len = k)
cuts = massage_cuts(data$cuts, k)
checkmate::assertList(cuts, len = k)
lambda = standardize_lambda(data$lambda, data$sigma)
sigma = standardize_sigma(data$lambda, data$sigma)
object = list(rho = tcrossprod(lambda, lambda) + diag(sigma^2),
cuts = cuts,
lambda = lambda,
sigma = sigma,
xi_sample = xi_theoretical(cuts, rho),
n = Inf)
cuts
lambda
sigma
rho
xi_theoretical(cuts, rho)
cuts
rho
devtools::load_all(".")
list(lambda = rep(1, 3), sigma = rep(1, 3), cuts = c(-Inf, 0, Inf))
latcon(list(lambda = rep(1, 3), sigma = rep(1, 3), cuts = c(-Inf, 0, Inf)))
fit = latcon(list(lambda = rep(1, 3),
sigma = rep(1, 3),
cuts = c(-Inf, 0, Inf)))
ordinal_omega(fit)
fit = latcon(list(lambda = rep(1, 3),
sigma = rep(1, 3),
cuts = c(-Inf, 0, Inf)))
ordinal_omega(fit, limit = TRUE)
fit = latcon(list(lambda = rep(1, 10),
sigma = rep(1, 10),
cuts = c(-Inf, 0, Inf)))
ordinal_omega(fit, limit = TRUE)
fit = latcon(list(lambda = rep(1, 10),
sigma = rep(1, 10),
cuts = c(-Inf, 0, Inf)))
ordinal_omega(fit)
fit = latcon(list(lambda = rep(1, 10),
sigma = rep(1, 10),
cuts = qnorm(seq(0, 1, length.out = 3))
ordinal_omega(fit)
qnorm(seq(0, 1, length.out = 3)
)
fit = latcon(list(lambda = rep(1, 10),
sigma = rep(1, 10),
cuts = qnorm(seq(0, 1, length.out = 4)))
ordinal_omega(fit)
fit = latcon(list(lambda = rep(1, 10),
sigma = rep(1, 10),
cuts = qnorm(seq(0, 1, length.out = 4))))
ordinal_omega(fit)
f = Vectorize(function(k) {
fit = latcon(list(lambda = rep(1, 10),
sigma = rep(1, 10),
cuts = qnorm(seq(0, 1, length.out = k + 1))))
ordinal_omega(fit)
})
k = 2:30
plot(k, f(k))
f = Vectorize(function(k) {
fit = latcon(list(lambda = rep(1, 4),
sigma = rep(1, 4),
cuts = qnorm(seq(0, 1, length.out = k + 1))))
ordinal_omega(fit)
})
k = 2:30
plot(k, f(k))
